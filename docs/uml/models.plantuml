@startuml models

package db {
    interface Dao {
        + boolean insert()
        + boolean update(values: Object...)
        + boolean delete()
    }
}

package models {
    class Hotel {
        - name : String
        - address : String
        - phone : BigInteger
        - id : int
        - amenities : List<Amenity>
        + Hotel()
        + Hotel(id : int)
        + Hotel(name : String, address : String, phoneNumber : BigInteger)
        + Hotel(id : int, name : String, address : String, phoneNumber : BigInteger)
        - {static} List<Hotel> select(function : String, values : Object...)
        + {static} List<Hotel> selectAll()
        + {static} List<Hotel> selectById(id : int)
        + {static} List<Hotel> selectByName(name : String)
        + List<Amenity> selectAmenities()
        + boolean insertAmenities(amenities : Amenity...)
        + boolean deleteAmenity(amenity : Amenity)
        + boolean updateAmenities(amenities : Amenity...)
        + String UIString()
        + String toHtml()
        + {static} String[] listToArray(list : List<Hotel>)
    }
    class Room {
        - id : int
        - floor : int
        - number : int
        - roomId : int
        - number : int
        - floor : int
        - type : Type
        - hotelId : int
        - price : float
        - occupied : boolean

        + Room()
        + Room(id : int)
        + Room(floor : int, number : int, type : Type, price : float, hotelFk : int)
        + Room(id : int, floor : int, number : int, type : Type, price : float, hotelFk : int)
        + {static} Room parseRs(ResultSet rs)
        - {static} List<Room> select(function : String, values : Object...)
        + {static} List<Room> selectAll()
        + {static} List<Room> selectById(id : int)
        + {static} List<Room> selectByHotelId(hotelFk : int)
        + {static} List<Room> selectByReserved(hotelFk : int)
        + {static} List<Room> selectByFloor(flood : int, hotelFk : int)
        + {static} List<Room> selectByType(type : Type, hotelFk : int)
        + {static} List<Room> selectByPriceRange(floor : float, ceil : float)
        + boolean markOccupiedAs(occupied : boolean)
        + String UIString()
        + String toHtml()
    }
    class Reservation {
        - id : int
        - reservationRoomFk : int
        - reservationCustomerFk : int
        - checkIn : String
        - checkOut : String
        - cost : float
        - status : Status
        + Reservation()
        + Reservation(id : int)
        + Reservation(id : int, reservationCustomerFk : int, reservationRoomFk, checkIn : String, checkOut : String, cost : float, status : Status)
        + Reservation(reservationCustomerFk : int, reservationRoomFk, checkIn : String, checkOut : String, cost : float, status : Status)
        - {static} List<Reservation> select(function : String, values : Object...)
        + {static} List<Reservation> selectAll()
        + {static} List<Reservation> selectByReservationId(id : int)
        + {static} List<Reservation> selectByHotel(reservationRoomFk : int)
        + {static} List<Reservation> selectByReservationStatus(status : int)
        + {static} List<Reservation> selectByCustomerId(customerId : int)
        + {static} List<Reservation> selectByRoomId(roomId : int)
        + {static} List<Reservation> selectByCheckInCheckOut(reservationRoomFk : int, checkInDate : String, checkOutDate : String)
        + {static} String UIString()
        + {static} String UIString(room : Room)
        + {static} String[] listToArray(list : List<Reservation>)
    }
    class User {
        - id : int
        - username : String
        - password : String
        - type : int
        - accountHotelFk : int
        + User(id : int, username : String, password : String, type : int, account_hotel_fk : int)
        + boolean isGuest()
        + boolean isAdmin()
        + boolean isManager()
        + boolean isEmployee()
        + {static} List<User> selectWithUsenamePassword(username : String, password : String, hotelId : int)
        + {static} List<User> selectWithUsenamePassword(username : String, password : String)
        + {static} User login(username : String, password : String, hotelId : int)
        + List<User> Manager_SelectAllUsers()
    }
    class Customer {
        - id : int
        - fName : String
        - lName : String
        - phone : BigInteger
        - email : String
        + Customer()
        + Customer(id : int, firstName : String, lastName : String, phone : BigInteger, email : String)
        + Customer(firstName : String, lastName : String, phone : BigInteger, email : String)
        + {static} boolean exists(email : String)
        + {static} List<Customer> selectById(id : int)
        + {static} List<Customer> selectByEmail(email : String)
        - {static} List<Customer> select(function : String, values : Object...)
        + {static} List<Customer> selectAll()
    }

    enum Amenity {
        POOL
        GYM
        BAR
        SPA
        SAUNA
        WIFI
        PARKING

        - {final} value : int
        + Amenity(value : int)
        + int getValue()
        + {static} Amenity fromValue(value : int)
    }
    enum Status {
        PENDING
        ACCEPTED

        - {final} value : int
        + Status(value : int)
        + int getValue()
        + {static} Status fromValue(value : int)
    }
    enum Type {
        SINGLE
        DOUBLE
        TWIN
        SUITE
        DELUXE
        FAMILY
        STUDIO
        KING
        QUEEN

        - {final} value : int
        + Type(value : int)
        + int getValue()
        + {static} Type fromValue(value : int)
    }
    enum UserType {
        ADMIN
        GUEST
        EMPLOYEE
        MANAGER

        - {final} value : int
        + UserType(value : int)
        + int getValue()
        + {static} UserType fromValue(value : int)
    }
}

Hotel o-- Amenity
Reservation o-- Status
Room o-- Type
User o-- UserType

Hotel --|> Dao : implements
Room --|> Dao : implements
Reservation --|> Dao : implements
User --|> Dao : implements
Customer --|> Dao : implements


@enduml
